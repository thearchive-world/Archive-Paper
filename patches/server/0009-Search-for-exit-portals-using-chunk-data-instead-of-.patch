From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: rfresh2 <89827146+rfresh2@users.noreply.github.com>
Date: Sat, 5 Oct 2024 22:12:46 -0700
Subject: [PATCH] Search for exit portals using chunk data instead of poi


diff --git a/src/main/java/io/papermc/paper/util/PortalScanner.java b/src/main/java/io/papermc/paper/util/PortalScanner.java
new file mode 100644
index 0000000000000000000000000000000000000000..606a4fc6eb50d2ec0ee5c37bcd6ad029477de2bb
--- /dev/null
+++ b/src/main/java/io/papermc/paper/util/PortalScanner.java
@@ -0,0 +1,213 @@
+package io.papermc.paper.util;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+import ca.spottedleaf.moonrise.common.util.CoordinateUtils;
+import ca.spottedleaf.moonrise.common.util.WorldUtil;
+import it.unimi.dsi.fastutil.longs.LongArrayFIFOQueue;
+import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
+import net.minecraft.core.BlockPos;
+import net.minecraft.util.BitStorage;
+import net.minecraft.util.Mth;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.EmptyLevelChunk;
+import net.minecraft.world.level.chunk.LevelChunkSection;
+import net.minecraft.world.level.chunk.PalettedContainer;
+import net.minecraft.world.level.chunk.status.ChunkStatus;
+import org.bukkit.Bukkit;
+
+/**
+ * Search logic here is replicated from PortalForcer and the PoiManager functions
+ * just replacing the poi search with checking the actual chunk data
+ */
+public class PortalScanner {
+
+    public static Optional<BlockPos> findNearestPortal(Level level, BlockPos sourcePosition, int range) {
+
+        double closestDistanceSquared = Double.MAX_VALUE;
+        List<BlockPos> closestPortals = new ArrayList<>(0);
+
+        final int lowerX = Mth.floor(sourcePosition.getX() - range) >> 4;
+        final int lowerZ = Mth.floor(sourcePosition.getZ() - range) >> 4;
+        final int lowerY = WorldUtil.getMinSection(level);
+        final int upperX = Mth.floor(sourcePosition.getX() + range) >> 4;
+        final int upperY = WorldUtil.getMaxSection(level);
+        final int upperZ = Mth.floor(sourcePosition.getZ() + range) >> 4;
+        final int centerX = sourcePosition.getX() >> 4;
+        final int centerY = Mth.clamp(sourcePosition.getY() >> 4, lowerY, upperY);
+        final int centerZ = sourcePosition.getZ() >> 4;
+        final long centerKey = CoordinateUtils.getChunkSectionKey(centerX, centerY, centerZ);
+
+        final LongArrayFIFOQueue queue = new LongArrayFIFOQueue();
+        final LongOpenHashSet seen = new LongOpenHashSet();
+        seen.add(centerKey);
+        queue.enqueue(centerKey);
+
+        while (!queue.isEmpty()) {
+            final long key = queue.dequeueLong();
+            final int sectionX = CoordinateUtils.getChunkSectionX(key);
+            final int sectionY = CoordinateUtils.getChunkSectionY(key);
+            final int sectionZ = CoordinateUtils.getChunkSectionZ(key);
+
+            if (sectionX < lowerX || sectionX > upperX || sectionY < lowerY || sectionY > upperY || sectionZ < lowerZ || sectionZ > upperZ) {
+                // out of bound chunk
+                continue;
+            }
+
+            final double sectionDistanceSquared = getSmallestDistanceSquared(
+                (sectionX << 4) + 0.5,
+                (sectionY << 4) + 0.5,
+                (sectionZ << 4) + 0.5,
+                (sectionX << 4) + 15.5,
+                (sectionY << 4) + 15.5,
+                (sectionZ << 4) + 15.5,
+                (double)sourcePosition.getX(), (double)sourcePosition.getY(), (double)sourcePosition.getZ()
+            );
+            if (sectionDistanceSquared > closestDistanceSquared) {
+                continue;
+            }
+
+            // queue all neighbours
+            for (int dz = -1; dz <= 1; ++dz) {
+                for (int dx = -1; dx <= 1; ++dx) {
+                    for (int dy = -1; dy <= 1; ++dy) {
+                        // -1 and 1 have the 1st bit set. so just add up the first bits, and it will tell us how many
+                        // values are set. we only care about cardinal neighbours, so, we only care if one value is set
+                        if ((dx & 1) + (dy & 1) + (dz & 1) != 1) {
+                            continue;
+                        }
+
+                        final int neighbourX = sectionX + dx;
+                        final int neighbourY = sectionY + dy;
+                        final int neighbourZ = sectionZ + dz;
+
+                        final long neighbourKey = CoordinateUtils.getChunkSectionKey(neighbourX, neighbourY, neighbourZ);
+                        if (seen.add(neighbourKey)) {
+                            queue.enqueue(neighbourKey);
+                        }
+                    }
+                }
+            }
+
+            final int chunkX = ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkSectionX(key);
+            final int chunkY = ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkSectionY(key);
+            final int chunkZ = ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkSectionZ(key);
+
+            ChunkAccess chunk = level.getChunk(chunkX, chunkZ, ChunkStatus.EMPTY);
+            if (chunk instanceof EmptyLevelChunk) continue;
+            LevelChunkSection section = chunk.getSection(chunk.getSectionIndexFromSectionY(chunkY));
+            if (section == null) continue;
+            List<BlockPos> portals = PortalScanner.findPortalBlockPositionsInSection(chunkX << 4, chunkY << 4, chunkZ << 4, section);
+            if (portals.isEmpty()) continue;
+
+            for (BlockPos portal : portals) {
+                if (Math.abs(portal.getX() - sourcePosition.getX()) > range || Math.abs(portal.getZ() - sourcePosition.getZ()) > range) {
+                    continue;
+                }
+                double distanceSquared = portal.distSqr(sourcePosition);
+                if (distanceSquared > closestDistanceSquared) continue;
+                if (distanceSquared < closestDistanceSquared) {
+                    closestPortals.clear();
+                    closestDistanceSquared = distanceSquared;
+                }
+                closestPortals.add(portal);
+            }
+        }
+
+        closestPortals.sort((record1, record2) -> {
+            // vanilla iterates the same way we do for data inside sections, so we know the ordering inside a section
+            // is fine and should be preserved (this sort is stable so we're good there)
+            // but they iterate sections by x then by z (like the following)
+            // for (int x = -dx; x <= dx; ++x)
+            //     for (int z = -dz; z <= dz; ++z)
+            //  ....
+            // so we need to reorder such that records with lower chunk z, then lower chunk x come first
+            final BlockPos pos1 = record1;
+            final BlockPos pos2 = record2;
+
+            final int cx1 = pos1.getX() >> 4;
+            final int cz1 = pos1.getZ() >> 4;
+
+            final int cx2 = pos2.getX() >> 4;
+            final int cz2 = pos2.getZ() >> 4;
+
+            if (cz2 != cz1) {
+                // want smaller z
+                return Integer.compare(cz1, cz2);
+            }
+
+            if (cx2 != cx1) {
+                // want smaller x
+                return Integer.compare(cx1, cx2);
+            }
+
+            // same chunk
+            // once vanilla has the chunk, it will iterate from all of the chunk sections starting from smaller y
+            // so now we just compare section y, wanting smaller y
+
+            return Integer.compare(pos1.getY() >> 4, pos2.getY() >> 4);
+        });
+        Optional<BlockPos> result = closestPortals.stream().findFirst();
+        Bukkit.getLogger().info("Closest portal is " + result.map(BlockPos::toShortString).orElse("null"));
+        return result;
+    }
+
+
+    public static List<BlockPos> findPortalBlockPositionsInSection(int iX, int iY, int iZ, LevelChunkSection section) {
+        final List<BlockPos> positions = new java.util.ArrayList<>(0);
+        if (section == null || section.hasOnlyAir()) return positions;
+        final PalettedContainer<BlockState> blockStateContainer = section.getStates();
+        final PalettedContainer.Data<BlockState> paletteData = blockStateContainer.data;
+        final BitStorage array = paletteData.storage();
+        if (array == null) return positions;
+        if (!blockStateContainer.maybeHas(bs -> bs.getBlock() == Blocks.NETHER_PORTAL)) return positions;
+        for (int x = 0; x < 16; x++) {
+            for (int z = 0; z < 16; z++) {
+                for (int y = 0; y < 16; y++) {
+                    BlockState state = blockStateContainer.get(x, y, z);
+                    if (state.getBlock() == Blocks.NETHER_PORTAL) {
+                        BlockPos pos = new BlockPos(iX + x, iY + y, iZ + z);
+                        positions.add(pos);
+                    }
+                }
+            }
+        }
+        return positions;
+    }
+
+    static double getSmallestDistanceSquared(final double boxMinX, final double boxMinY, final double boxMinZ,
+                                             final double boxMaxX, final double boxMaxY, final double boxMaxZ,
+
+                                             final double circleX, final double circleY, final double circleZ) {
+        // is the circle center inside the box?
+        if (circleX >= boxMinX && circleX <= boxMaxX && circleY >= boxMinY && circleY <= boxMaxY && circleZ >= boxMinZ && circleZ <= boxMaxZ) {
+            return 0.0;
+        }
+
+        final double boxWidthX = (boxMaxX - boxMinX) / 2.0;
+        final double boxWidthY = (boxMaxY - boxMinY) / 2.0;
+        final double boxWidthZ = (boxMaxZ - boxMinZ) / 2.0;
+
+        final double boxCenterX = (boxMinX + boxMaxX) / 2.0;
+        final double boxCenterY = (boxMinY + boxMaxY) / 2.0;
+        final double boxCenterZ = (boxMinZ + boxMaxZ) / 2.0;
+
+        double centerDiffX = circleX - boxCenterX;
+        double centerDiffY = circleY - boxCenterY;
+        double centerDiffZ = circleZ - boxCenterZ;
+
+        centerDiffX = circleX - (clamp(centerDiffX, -boxWidthX, boxWidthX) + boxCenterX);
+        centerDiffY = circleY - (clamp(centerDiffY, -boxWidthY, boxWidthY) + boxCenterY);
+        centerDiffZ = circleZ - (clamp(centerDiffZ, -boxWidthZ, boxWidthZ) + boxCenterZ);
+
+        return (centerDiffX * centerDiffX) + (centerDiffY * centerDiffY) + (centerDiffZ * centerDiffZ);
+    }
+
+    static double clamp(final double val, final double min, final double max) {
+        return (val < min ? min : (val > max ? max : val));
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
index 0fdbcab175b51a8b77646e0e4a267d987b133a35..d4f31d1fb79be5f78f67f9306ba2522352e6dea9 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
@@ -172,7 +172,7 @@ public class NetherPortalBlock extends Block implements Portal {
 
     @Nullable
     private DimensionTransition getExitPortal(ServerLevel worldserver, Entity entity, BlockPos blockposition, BlockPos blockposition1, boolean flag, WorldBorder worldborder, int searchRadius, boolean canCreatePortal, int createRadius) {
-        Optional<BlockPos> optional = worldserver.getPortalForcer().findClosestPortalPosition(blockposition1, worldborder, searchRadius);
+        Optional<BlockPos> optional = io.papermc.paper.util.PortalScanner.findNearestPortal(worldserver, blockposition1, searchRadius);
         BlockUtil.FoundRectangle blockutil_rectangle;
         DimensionTransition.PostDimensionTransition dimensiontransition_a;
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index 13d3c877b006a4975e7370713e3919c661e7890f..16035cf8c177b4bb62938738899d3bfa34fbde0e 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -386,7 +386,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
         void accept(T object, int count);
     }
 
-    static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) {
+    public record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) {
         public void copyFrom(Palette<T> palette, BitStorage storage) {
             for (int i = 0; i < storage.getSize(); i++) {
                 T object = palette.valueFor(storage.get(i));
