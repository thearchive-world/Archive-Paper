From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: rfresh2 <89827146+rfresh2@users.noreply.github.com>
Date: Thu, 15 Feb 2024 20:56:17 -0800
Subject: [PATCH] Skip chunk save serialization


diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
index b66a7d4aab887309579154815a0d4abf9de506b0..ebb71db9f9c80334fd4e1ab015c21eb8e5c052fd 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
@@ -1862,9 +1862,11 @@ public final class NewChunkHolder {
         try {
             if (unloading) {
                 try {
-                    final ChunkSerializer.AsyncSaveData asyncSaveData = ChunkSerializer.getAsyncSaveData(this.world, chunk);
+                    // The Archive - Skip chunk serialization
+                    // final ChunkSerializer.AsyncSaveData asyncSaveData = ChunkSerializer.getAsyncSaveData(this.world, chunk);
 
-                    final PrioritisedExecutor.PrioritisedTask task = this.scheduler.loadExecutor.createTask(new AsyncChunkSerializeTask(this.world, chunk, asyncSaveData, this));
+                    final PrioritisedExecutor.PrioritisedTask task = this.scheduler.loadExecutor.createTask(() -> this.completeAsyncChunkDataSave(null));
+                    // final PrioritisedExecutor.PrioritisedTask task = this.scheduler.loadExecutor.createTask(new AsyncChunkSerializeTask(this.world, chunk, asyncSaveData, this));
 
                     this.chunkDataUnload.task().setTask(task);
 
@@ -1881,14 +1883,17 @@ public final class NewChunkHolder {
                 }
             }
 
-            final CompoundTag save = ChunkSerializer.saveChunk(this.world, chunk, null);
+            // The Archive - Skip chunk serialization
+            // final CompoundTag save = ChunkSerializer.saveChunk(this.world, chunk, null);
 
             if (unloading) {
                 completing = true;
-                this.completeAsyncChunkDataSave(save);
-                LOGGER.info("Successfully serialized chunk data (" + this.chunkX + "," + this.chunkZ + ") in world '" + this.world.getWorld().getName() + "' synchronously");
+                // The Archive - Skip chunk serialization
+                this.completeAsyncChunkDataSave(null);
+                // LOGGER.info("Successfully serialized chunk data (" + this.chunkX + "," + this.chunkZ + ") in world '" + this.world.getWorld().getName() + "' synchronously");
             } else {
-                RegionFileIOThread.scheduleSave(this.world, this.chunkX, this.chunkZ, save, RegionFileIOThread.RegionFileType.CHUNK_DATA);
+                // The Archive - Disable chunk saving
+                // RegionFileIOThread.scheduleSave(this.world, this.chunkX, this.chunkZ, save, RegionFileIOThread.RegionFileType.CHUNK_DATA);
             }
             chunk.setUnsaved(false);
         } catch (final ThreadDeath death) {
