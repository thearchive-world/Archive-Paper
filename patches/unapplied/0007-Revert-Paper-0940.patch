From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: rfresh2 <89827146+rfresh2@users.noreply.github.com>
Date: Thu, 29 Feb 2024 10:44:07 -0800
Subject: [PATCH] Revert Paper 0940


diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 15ee41452992714108efe53b708b5a4e1da7c1ff..14e14dd5c17dcc1da6def2ee56a81f241f32b1a7 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -2,6 +2,7 @@ package io.papermc.paper.chunk.system.entity;
 
 import com.destroystokyo.paper.util.maplist.EntityList;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.chunk.system.ChunkSystem;
 import io.papermc.paper.util.CoordinateUtils;
 import io.papermc.paper.util.TickThread;
 import io.papermc.paper.util.WorldUtil;
@@ -9,9 +10,17 @@ import io.papermc.paper.world.ChunkEntitySlices;
 import it.unimi.dsi.fastutil.ints.Int2ReferenceOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2ReferenceOpenHashMap;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+import java.util.NoSuchElementException;
+import java.util.UUID;
+import java.util.concurrent.locks.StampedLock;
+import java.util.function.Consumer;
+import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
-import io.papermc.paper.chunk.system.ChunkSystem;
-import net.minecraft.server.level.ChunkHolder;
+import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.AbortableIterationConsumer;
 import net.minecraft.util.Mth;
@@ -21,7 +30,6 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.entity.EntityInLevelCallback;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.entity.LevelCallback;
-import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.world.level.entity.LevelEntityGetter;
 import net.minecraft.world.level.entity.Visibility;
 import net.minecraft.world.phys.AABB;
@@ -29,15 +37,6 @@ import net.minecraft.world.phys.Vec3;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-import java.util.NoSuchElementException;
-import java.util.UUID;
-import java.util.concurrent.locks.StampedLock;
-import java.util.function.Consumer;
-import java.util.function.Predicate;
 
 public final class EntityLookup implements LevelEntityGetter<Entity> {
 
@@ -351,10 +350,10 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
             }
 
             if (!entity.chunkPosition().equals(forChunk)) {
-                LOGGER.warn("Root entity " + entity + " is outside of serialized chunk " + forChunk);
+                // LOGGER.warn("Root entity " + entity + " is outside of serialized chunk " + forChunk);
                 // can't set removed here, as we may not own the chunk position
                 // skip the entity
-                continue;
+                // continue;
             }
 
             final Vec3 rootPosition = entity.position();
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index d53c4f3d47a8728d56fbd9b5e12be51885560d52..db123f254175c81d25b45a3d72aafdfb282a2956 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -38,7 +38,6 @@ import net.minecraft.server.level.ThreadedLevelLightEngine;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.world.level.block.Block;
@@ -48,7 +47,6 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.CarvingMask;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
-import net.minecraft.world.level.chunk.DataLayer;
 import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LevelChunkSection;
@@ -379,13 +377,6 @@ public class ChunkSerializer {
             for (int k1 = 0; k1 < nbttaglist3.size(); ++k1) {
                 CompoundTag nbttagcompound4 = nbttaglist3.getCompound(k1);
 
-                // Paper start - do not read tile entities positioned outside the chunk
-                BlockPos blockposition = BlockEntity.getPosFromTag(nbttagcompound4);
-                if ((blockposition.getX() >> 4) != chunkPos.x || (blockposition.getZ() >> 4) != chunkPos.z) {
-                    LOGGER.warn("Tile entity serialized in chunk " + chunkPos + " in world '" + world.getWorld().getName() + "' positioned at " + blockposition + " is located outside of the chunk");
-                    continue;
-                }
-                // Paper end - do not read tile entities positioned outside the chunk
                 ((ChunkAccess) object1).setBlockEntityNbt(nbttagcompound4);
             }
 
@@ -684,19 +675,10 @@ public class ChunkSerializer {
                     CompoundTag nbttagcompound1 = nbttaglist1.getCompound(i);
                     boolean flag = nbttagcompound1.getBoolean("keepPacked");
 
-                    // Paper start - do not read tile entities positioned outside the chunk
-                    BlockPos blockposition = BlockEntity.getPosFromTag(nbttagcompound1); // moved up
-                    ChunkPos chunkPos = chunk.getPos();
-                    if ((blockposition.getX() >> 4) != chunkPos.x || (blockposition.getZ() >> 4) != chunkPos.z) {
-                        LOGGER.warn("Tile entity serialized in chunk " + chunkPos + " in world '" + world.getWorld().getName() + "' positioned at " + blockposition + " is located outside of the chunk");
-                        continue;
-                    }
-                    // Paper end - do not read tile entities positioned outside the chunk
-
                     if (flag) {
                         chunk.setBlockEntityNbt(nbttagcompound1);
                     } else {
-                        // Paper - do not read tile entities positioned outside the chunk; move up
+                        BlockPos blockposition = BlockEntity.getPosFromTag(nbttagcompound1);
                         BlockEntity tileentity = BlockEntity.loadStatic(blockposition, chunk.getBlockState(blockposition), nbttagcompound1);
 
                         if (tileentity != null) {
